name: Deploy Object Detection Worker to GKE

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GAR_LOCATION: asia-southeast1
  GKE_CLUSTER: object-detection-cluster
  GKE_ZONE: asia-southeast1-a
  DEPLOYMENT_NAME: object-detection-worker
  REPOSITORY: object-detection-worker
  IMAGE: object-detection-worker

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8

      - name: Run linting
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: pytest --cov=src --cov-report=xml

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Configure Docker to use gcloud as a credential helper'
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: 'Build and push Docker image'
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t "$GAR_LOCATION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPOSITORY/$IMAGE:$IMAGE_TAG" .
          docker push "$GAR_LOCATION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPOSITORY/$IMAGE:$IMAGE_TAG"

      - name: 'Get GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: ${{ secrets.GKE_CLUSTER_NAME }}
          location: ${{ secrets.GKE_ZONE }}

      - name: Deploy to GKE
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update image in deployment
          sed -i "s|IMAGE_PLACEHOLDER|$GAR_LOCATION-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/$REPOSITORY/$IMAGE:$IMAGE_TAG|g" k8s/deployment.yml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/
          
          # Wait for rollout to complete
          kubectl rollout status deployment/$DEPLOYMENT_NAME -n object-detection --timeout=300s
          
          # Verify deployment
          kubectl get pods -n object-detection -l app=$DEPLOYMENT_NAME

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'